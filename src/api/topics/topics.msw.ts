/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Social Learning Platform API
 * The Social Learning Platform API description
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  ResFindOneTopicDto,
  TopicsDto
} from '../../model';


export const getApiCreateTopicResponseMock = (overrideResponse: Partial< TopicsDto > = {}): TopicsDto => ({id: faker.string.alpha(20), name: faker.string.alpha(20), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), ...overrideResponse})

export const getApiGetTopicsResponseMock = (): TopicsDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), name: faker.string.alpha(20), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined])})))

export const getApiGetTopicResponseMock = (overrideResponse: Partial< ResFindOneTopicDto > = {}): ResFindOneTopicDto => ({id: faker.string.alpha(20), name: faker.string.alpha(20), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), vocabularies: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), topicId: faker.string.alpha(20), context: faker.string.alpha(20), meaning: faker.string.alpha(20), phonetic: faker.string.alpha(20), example: faker.string.alpha(20), meaningExample: faker.string.alpha(20), studyCount: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, learnedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), ...overrideResponse})

export const getApiUpdateTopicResponseMock = (overrideResponse: Partial< TopicsDto > = {}): TopicsDto => ({id: faker.string.alpha(20), name: faker.string.alpha(20), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), ...overrideResponse})

export const getApiRemoveTopicResponseMock = (overrideResponse: Partial< TopicsDto > = {}): TopicsDto => ({id: faker.string.alpha(20), name: faker.string.alpha(20), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), ...overrideResponse})


export const getApiCreateTopicMockHandler = (overrideResponse?: TopicsDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<TopicsDto> | TopicsDto)) => {
  return http.post('*/topics', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiCreateTopicResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiGetTopicsMockHandler = (overrideResponse?: TopicsDto[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<TopicsDto[]> | TopicsDto[])) => {
  return http.get('*/topics', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiGetTopicsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiGetTopicMockHandler = (overrideResponse?: ResFindOneTopicDto | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ResFindOneTopicDto> | ResFindOneTopicDto)) => {
  return http.get('*/topics/:topicId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiGetTopicResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiUpdateTopicMockHandler = (overrideResponse?: TopicsDto | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<TopicsDto> | TopicsDto)) => {
  return http.patch('*/topics/:topicId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiUpdateTopicResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiRemoveTopicMockHandler = (overrideResponse?: TopicsDto | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<TopicsDto> | TopicsDto)) => {
  return http.delete('*/topics/:topicId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiRemoveTopicResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getTopicsMock = () => [
  getApiCreateTopicMockHandler(),
  getApiGetTopicsMockHandler(),
  getApiGetTopicMockHandler(),
  getApiUpdateTopicMockHandler(),
  getApiRemoveTopicMockHandler()
]
