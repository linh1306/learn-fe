/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Social Learning Platform API
 * The Social Learning Platform API description
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ApiResetPasswordParams,
  BodyForgotPasswordDto,
  BodySignInDto,
  BodySignUpDto,
  PublicUsersDto,
  ResSignInDto
} from '../../model';

import { customMutator } from '.././index';
import type { ErrorType , BodyType } from '.././index';




/**
 * @summary Đăng nhập
 */
export const apiSignIn = (
    bodySignInDto: BodyType<BodySignInDto>,
 signal?: AbortSignal
) => {
      
      
      return customMutator<ResSignInDto>(
      {url: `/auth/signin`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: bodySignInDto, signal
    },
      );
    }
  


export const getApiSignInMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiSignIn>>, TError,{data: BodyType<BodySignInDto>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiSignIn>>, TError,{data: BodyType<BodySignInDto>}, TContext> => {

const mutationKey = ['apiSignIn'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiSignIn>>, {data: BodyType<BodySignInDto>}> = (props) => {
          const {data} = props ?? {};

          return  apiSignIn(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiSignInMutationResult = NonNullable<Awaited<ReturnType<typeof apiSignIn>>>
    export type ApiSignInMutationBody = BodyType<BodySignInDto>
    export type ApiSignInMutationError = ErrorType<unknown>

    /**
 * @summary Đăng nhập
 */
export const useApiSignIn = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiSignIn>>, TError,{data: BodyType<BodySignInDto>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof apiSignIn>>,
        TError,
        {data: BodyType<BodySignInDto>},
        TContext
      > => {

      const mutationOptions = getApiSignInMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Đăng ký
 */
export const apiSignUp = (
    bodySignUpDto: BodyType<BodySignUpDto>,
 signal?: AbortSignal
) => {
      
      
      return customMutator<PublicUsersDto>(
      {url: `/auth/signup`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: bodySignUpDto, signal
    },
      );
    }
  


export const getApiSignUpMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiSignUp>>, TError,{data: BodyType<BodySignUpDto>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiSignUp>>, TError,{data: BodyType<BodySignUpDto>}, TContext> => {

const mutationKey = ['apiSignUp'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiSignUp>>, {data: BodyType<BodySignUpDto>}> = (props) => {
          const {data} = props ?? {};

          return  apiSignUp(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiSignUpMutationResult = NonNullable<Awaited<ReturnType<typeof apiSignUp>>>
    export type ApiSignUpMutationBody = BodyType<BodySignUpDto>
    export type ApiSignUpMutationError = ErrorType<unknown>

    /**
 * @summary Đăng ký
 */
export const useApiSignUp = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiSignUp>>, TError,{data: BodyType<BodySignUpDto>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof apiSignUp>>,
        TError,
        {data: BodyType<BodySignUpDto>},
        TContext
      > => {

      const mutationOptions = getApiSignUpMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Gửi yêu cầu cấp lại mật khẩu
 */
export const apiForgotPassword = (
    bodyForgotPasswordDto: BodyType<BodyForgotPasswordDto>,
 signal?: AbortSignal
) => {
      
      
      return customMutator<PublicUsersDto>(
      {url: `/auth/forgot-password`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: bodyForgotPasswordDto, signal
    },
      );
    }
  


export const getApiForgotPasswordMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiForgotPassword>>, TError,{data: BodyType<BodyForgotPasswordDto>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiForgotPassword>>, TError,{data: BodyType<BodyForgotPasswordDto>}, TContext> => {

const mutationKey = ['apiForgotPassword'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiForgotPassword>>, {data: BodyType<BodyForgotPasswordDto>}> = (props) => {
          const {data} = props ?? {};

          return  apiForgotPassword(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiForgotPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof apiForgotPassword>>>
    export type ApiForgotPasswordMutationBody = BodyType<BodyForgotPasswordDto>
    export type ApiForgotPasswordMutationError = ErrorType<unknown>

    /**
 * @summary Gửi yêu cầu cấp lại mật khẩu
 */
export const useApiForgotPassword = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiForgotPassword>>, TError,{data: BodyType<BodyForgotPasswordDto>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof apiForgotPassword>>,
        TError,
        {data: BodyType<BodyForgotPasswordDto>},
        TContext
      > => {

      const mutationOptions = getApiForgotPasswordMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Cấp lại mật khẩu
 */
export const apiResetPassword = (
    params: ApiResetPasswordParams,
 signal?: AbortSignal
) => {
      
      
      return customMutator<PublicUsersDto>(
      {url: `/auth/reset-password`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiResetPasswordQueryKey = (params: ApiResetPasswordParams,) => {
    return [`/auth/reset-password`, ...(params ? [params]: [])] as const;
    }

    
export const getApiResetPasswordInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof apiResetPassword>>, ApiResetPasswordParams['page']>, TError = ErrorType<unknown>>(params: ApiResetPasswordParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiResetPassword>>, TError, TData, Awaited<ReturnType<typeof apiResetPassword>>, QueryKey, ApiResetPasswordParams['page']>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiResetPasswordQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiResetPassword>>, QueryKey, ApiResetPasswordParams['page']> = ({ signal, pageParam }) => apiResetPassword({...params, 'page': pageParam || params?.['page']}, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000, refetchOnWindowFocus: false, retry: false,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiResetPassword>>, TError, TData, Awaited<ReturnType<typeof apiResetPassword>>, QueryKey, ApiResetPasswordParams['page']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiResetPasswordInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof apiResetPassword>>>
export type ApiResetPasswordInfiniteQueryError = ErrorType<unknown>


export function useApiResetPasswordInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiResetPassword>>, ApiResetPasswordParams['page']>, TError = ErrorType<unknown>>(
 params: ApiResetPasswordParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiResetPassword>>, TError, TData, Awaited<ReturnType<typeof apiResetPassword>>, QueryKey, ApiResetPasswordParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiResetPassword>>,
          TError,
          Awaited<ReturnType<typeof apiResetPassword>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiResetPasswordInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiResetPassword>>, ApiResetPasswordParams['page']>, TError = ErrorType<unknown>>(
 params: ApiResetPasswordParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiResetPassword>>, TError, TData, Awaited<ReturnType<typeof apiResetPassword>>, QueryKey, ApiResetPasswordParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiResetPassword>>,
          TError,
          Awaited<ReturnType<typeof apiResetPassword>>, QueryKey
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiResetPasswordInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiResetPassword>>, ApiResetPasswordParams['page']>, TError = ErrorType<unknown>>(
 params: ApiResetPasswordParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiResetPassword>>, TError, TData, Awaited<ReturnType<typeof apiResetPassword>>, QueryKey, ApiResetPasswordParams['page']>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Cấp lại mật khẩu
 */

export function useApiResetPasswordInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiResetPassword>>, ApiResetPasswordParams['page']>, TError = ErrorType<unknown>>(
 params: ApiResetPasswordParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiResetPassword>>, TError, TData, Awaited<ReturnType<typeof apiResetPassword>>, QueryKey, ApiResetPasswordParams['page']>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiResetPasswordInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiResetPasswordQueryOptions = <TData = Awaited<ReturnType<typeof apiResetPassword>>, TError = ErrorType<unknown>>(params: ApiResetPasswordParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiResetPassword>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiResetPasswordQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiResetPassword>>> = ({ signal }) => apiResetPassword(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000, refetchOnWindowFocus: false, retry: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiResetPassword>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiResetPasswordQueryResult = NonNullable<Awaited<ReturnType<typeof apiResetPassword>>>
export type ApiResetPasswordQueryError = ErrorType<unknown>


export function useApiResetPassword<TData = Awaited<ReturnType<typeof apiResetPassword>>, TError = ErrorType<unknown>>(
 params: ApiResetPasswordParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiResetPassword>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiResetPassword>>,
          TError,
          Awaited<ReturnType<typeof apiResetPassword>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiResetPassword<TData = Awaited<ReturnType<typeof apiResetPassword>>, TError = ErrorType<unknown>>(
 params: ApiResetPasswordParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiResetPassword>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiResetPassword>>,
          TError,
          Awaited<ReturnType<typeof apiResetPassword>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiResetPassword<TData = Awaited<ReturnType<typeof apiResetPassword>>, TError = ErrorType<unknown>>(
 params: ApiResetPasswordParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiResetPassword>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Cấp lại mật khẩu
 */

export function useApiResetPassword<TData = Awaited<ReturnType<typeof apiResetPassword>>, TError = ErrorType<unknown>>(
 params: ApiResetPasswordParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiResetPassword>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiResetPasswordQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Thông tin người dùng
 */
export const apiProfile = (
    
 signal?: AbortSignal
) => {
      
      
      return customMutator<PublicUsersDto>(
      {url: `/auth`, method: 'GET', signal
    },
      );
    }
  

export const getApiProfileQueryKey = () => {
    return [`/auth`] as const;
    }

    
export const getApiProfileInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof apiProfile>>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiProfile>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiProfileQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiProfile>>> = ({ signal }) => apiProfile(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000, refetchOnWindowFocus: false, retry: false,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiProfile>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiProfileInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof apiProfile>>>
export type ApiProfileInfiniteQueryError = ErrorType<unknown>


export function useApiProfileInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiProfile>>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiProfile>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiProfile>>,
          TError,
          Awaited<ReturnType<typeof apiProfile>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiProfileInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiProfile>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiProfile>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiProfile>>,
          TError,
          Awaited<ReturnType<typeof apiProfile>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiProfileInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiProfile>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiProfile>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Thông tin người dùng
 */

export function useApiProfileInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiProfile>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiProfile>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiProfileInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiProfileQueryOptions = <TData = Awaited<ReturnType<typeof apiProfile>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiProfile>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiProfileQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiProfile>>> = ({ signal }) => apiProfile(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000, refetchOnWindowFocus: false, retry: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiProfile>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiProfileQueryResult = NonNullable<Awaited<ReturnType<typeof apiProfile>>>
export type ApiProfileQueryError = ErrorType<unknown>


export function useApiProfile<TData = Awaited<ReturnType<typeof apiProfile>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiProfile>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiProfile>>,
          TError,
          Awaited<ReturnType<typeof apiProfile>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiProfile<TData = Awaited<ReturnType<typeof apiProfile>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiProfile>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiProfile>>,
          TError,
          Awaited<ReturnType<typeof apiProfile>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiProfile<TData = Awaited<ReturnType<typeof apiProfile>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiProfile>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Thông tin người dùng
 */

export function useApiProfile<TData = Awaited<ReturnType<typeof apiProfile>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiProfile>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiProfileQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



