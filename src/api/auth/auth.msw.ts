/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Social Learning Platform API
 * The Social Learning Platform API description
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  PublicUsersDto,
  ResSignInDto
} from '../../model';


export const getApiSignInResponseMock = (overrideResponse: Partial< ResSignInDto > = {}): ResSignInDto => ({access_token: faker.string.alpha(20), refresh_token: faker.string.alpha(20), ...overrideResponse})

export const getApiSignUpResponseMock = (overrideResponse: Partial< PublicUsersDto > = {}): PublicUsersDto => ({id: faker.string.alpha(20), email: faker.string.alpha(20), name: faker.string.alpha(20), role: faker.helpers.arrayElement(['user','admin'] as const), ...overrideResponse})

export const getApiForgotPasswordResponseMock = (overrideResponse: Partial< PublicUsersDto > = {}): PublicUsersDto => ({id: faker.string.alpha(20), email: faker.string.alpha(20), name: faker.string.alpha(20), role: faker.helpers.arrayElement(['user','admin'] as const), ...overrideResponse})

export const getApiResetPasswordResponseMock = (overrideResponse: Partial< PublicUsersDto > = {}): PublicUsersDto => ({id: faker.string.alpha(20), email: faker.string.alpha(20), name: faker.string.alpha(20), role: faker.helpers.arrayElement(['user','admin'] as const), ...overrideResponse})

export const getApiProfileResponseMock = (overrideResponse: Partial< PublicUsersDto > = {}): PublicUsersDto => ({id: faker.string.alpha(20), email: faker.string.alpha(20), name: faker.string.alpha(20), role: faker.helpers.arrayElement(['user','admin'] as const), ...overrideResponse})


export const getApiSignInMockHandler = (overrideResponse?: ResSignInDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ResSignInDto> | ResSignInDto)) => {
  return http.post('*/auth/signin', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiSignInResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiSignUpMockHandler = (overrideResponse?: PublicUsersDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PublicUsersDto> | PublicUsersDto)) => {
  return http.post('*/auth/signup', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiSignUpResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiForgotPasswordMockHandler = (overrideResponse?: PublicUsersDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PublicUsersDto> | PublicUsersDto)) => {
  return http.post('*/auth/forgot-password', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiForgotPasswordResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiResetPasswordMockHandler = (overrideResponse?: PublicUsersDto | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PublicUsersDto> | PublicUsersDto)) => {
  return http.get('*/auth/reset-password', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiResetPasswordResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiProfileMockHandler = (overrideResponse?: PublicUsersDto | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PublicUsersDto> | PublicUsersDto)) => {
  return http.get('*/auth', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiProfileResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getAuthMock = () => [
  getApiSignInMockHandler(),
  getApiSignUpMockHandler(),
  getApiForgotPasswordMockHandler(),
  getApiResetPasswordMockHandler(),
  getApiProfileMockHandler()
]
