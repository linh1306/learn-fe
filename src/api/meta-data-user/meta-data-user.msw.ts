/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Social Learning Platform API
 * The Social Learning Platform API description
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  MetaDataUsersDto
} from '../../model';


export const getApiGetMetaUserResponseMock = (overrideResponse: Partial< MetaDataUsersDto > = {}): MetaDataUsersDto => ({userId: faker.string.alpha(20), topicsId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), facebookId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), currentTopic: faker.string.alpha(20), profile: faker.string.alpha(20), level: faker.number.int({min: undefined, max: undefined}), typeLevel: faker.helpers.arrayElement(['toeic','ielts'] as const), ...overrideResponse})

export const getApiUpdateMetaUserResponseMock = (overrideResponse: Partial< MetaDataUsersDto > = {}): MetaDataUsersDto => ({userId: faker.string.alpha(20), topicsId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), facebookId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), currentTopic: faker.string.alpha(20), profile: faker.string.alpha(20), level: faker.number.int({min: undefined, max: undefined}), typeLevel: faker.helpers.arrayElement(['toeic','ielts'] as const), ...overrideResponse})


export const getApiGetMetaUserMockHandler = (overrideResponse?: MetaDataUsersDto | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<MetaDataUsersDto> | MetaDataUsersDto)) => {
  return http.get('*/metaUser', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiGetMetaUserResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiUpdateMetaUserMockHandler = (overrideResponse?: MetaDataUsersDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<MetaDataUsersDto> | MetaDataUsersDto)) => {
  return http.post('*/metaUser', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiUpdateMetaUserResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getMetaDataUserMock = () => [
  getApiGetMetaUserMockHandler(),
  getApiUpdateMetaUserMockHandler()
]
