/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Social Learning Platform API
 * The Social Learning Platform API description
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  BodyUpdateMetaUser,
  MetaDataUsersDto
} from '../../model';

import { customMutator } from '.././index';
import type { ErrorType , BodyType } from '.././index';




/**
 * @summary Chỉnh sửa meta
 */
export const apiGetMetaUser = (
    
 signal?: AbortSignal
) => {
      
      
      return customMutator<MetaDataUsersDto>(
      {url: `/metaUser`, method: 'GET', signal
    },
      );
    }
  

export const getApiGetMetaUserQueryKey = () => {
    return [`/metaUser`] as const;
    }

    
export const getApiGetMetaUserInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof apiGetMetaUser>>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiGetMetaUser>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiGetMetaUserQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiGetMetaUser>>> = ({ signal }) => apiGetMetaUser(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000, refetchOnWindowFocus: false, retry: false,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiGetMetaUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiGetMetaUserInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof apiGetMetaUser>>>
export type ApiGetMetaUserInfiniteQueryError = ErrorType<unknown>


export function useApiGetMetaUserInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiGetMetaUser>>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiGetMetaUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiGetMetaUser>>,
          TError,
          Awaited<ReturnType<typeof apiGetMetaUser>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiGetMetaUserInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiGetMetaUser>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiGetMetaUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiGetMetaUser>>,
          TError,
          Awaited<ReturnType<typeof apiGetMetaUser>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiGetMetaUserInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiGetMetaUser>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiGetMetaUser>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Chỉnh sửa meta
 */

export function useApiGetMetaUserInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiGetMetaUser>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiGetMetaUser>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiGetMetaUserInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiGetMetaUserQueryOptions = <TData = Awaited<ReturnType<typeof apiGetMetaUser>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGetMetaUser>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiGetMetaUserQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiGetMetaUser>>> = ({ signal }) => apiGetMetaUser(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000, refetchOnWindowFocus: false, retry: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiGetMetaUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiGetMetaUserQueryResult = NonNullable<Awaited<ReturnType<typeof apiGetMetaUser>>>
export type ApiGetMetaUserQueryError = ErrorType<unknown>


export function useApiGetMetaUser<TData = Awaited<ReturnType<typeof apiGetMetaUser>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGetMetaUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiGetMetaUser>>,
          TError,
          Awaited<ReturnType<typeof apiGetMetaUser>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiGetMetaUser<TData = Awaited<ReturnType<typeof apiGetMetaUser>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGetMetaUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiGetMetaUser>>,
          TError,
          Awaited<ReturnType<typeof apiGetMetaUser>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiGetMetaUser<TData = Awaited<ReturnType<typeof apiGetMetaUser>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGetMetaUser>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Chỉnh sửa meta
 */

export function useApiGetMetaUser<TData = Awaited<ReturnType<typeof apiGetMetaUser>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGetMetaUser>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiGetMetaUserQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Chỉnh sửa meta
 */
export const apiUpdateMetaUser = (
    bodyUpdateMetaUser: BodyType<BodyUpdateMetaUser>,
 signal?: AbortSignal
) => {
      
      
      return customMutator<MetaDataUsersDto>(
      {url: `/metaUser`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: bodyUpdateMetaUser, signal
    },
      );
    }
  


export const getApiUpdateMetaUserMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiUpdateMetaUser>>, TError,{data: BodyType<BodyUpdateMetaUser>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiUpdateMetaUser>>, TError,{data: BodyType<BodyUpdateMetaUser>}, TContext> => {

const mutationKey = ['apiUpdateMetaUser'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiUpdateMetaUser>>, {data: BodyType<BodyUpdateMetaUser>}> = (props) => {
          const {data} = props ?? {};

          return  apiUpdateMetaUser(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiUpdateMetaUserMutationResult = NonNullable<Awaited<ReturnType<typeof apiUpdateMetaUser>>>
    export type ApiUpdateMetaUserMutationBody = BodyType<BodyUpdateMetaUser>
    export type ApiUpdateMetaUserMutationError = ErrorType<unknown>

    /**
 * @summary Chỉnh sửa meta
 */
export const useApiUpdateMetaUser = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiUpdateMetaUser>>, TError,{data: BodyType<BodyUpdateMetaUser>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof apiUpdateMetaUser>>,
        TError,
        {data: BodyType<BodyUpdateMetaUser>},
        TContext
      > => {

      const mutationOptions = getApiUpdateMetaUserMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    