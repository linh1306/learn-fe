/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Social Learning Platform API
 * The Social Learning Platform API description
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  ResChatWithGeminiDto
} from '../../model';


export const getApiChatResponseMock = (overrideResponse: Partial< ResChatWithGeminiDto > = {}): ResChatWithGeminiDto => ({fixed: faker.string.alpha({length: {min: 10, max: 20}}), list: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({raw: faker.string.alpha({length: {min: 10, max: 20}}), word: faker.string.alpha({length: {min: 10, max: 20}}), phonetic: faker.string.alpha({length: {min: 10, max: 20}}), meaning: faker.string.alpha({length: {min: 10, max: 20}}), exEn: faker.string.alpha({length: {min: 10, max: 20}}), exVi: faker.string.alpha({length: {min: 10, max: 20}})})), explain: faker.string.alpha({length: {min: 10, max: 20}}), reply: faker.string.alpha({length: {min: 10, max: 20}}), vi: faker.string.alpha({length: {min: 10, max: 20}}), ...overrideResponse})


export const getApiChatMockHandler = (overrideResponse?: ResChatWithGeminiDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ResChatWithGeminiDto> | ResChatWithGeminiDto)) => {
  return http.post('*/chat', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getApiChatResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getChatMock = () => [
  getApiChatMockHandler()
]
