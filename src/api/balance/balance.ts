/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Social Learning Platform API
 * The Social Learning Platform API description
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  BalanceDto,
  TransactionHistoryDto
} from '../../model';

import { customMutator } from '.././index';
import type { ErrorType } from '.././index';




/**
 * @summary L·∫•y s·ªë d∆∞
 */
export const apiGetBalance = (
    
 signal?: AbortSignal
) => {
      
      
      return customMutator<BalanceDto>(
      {url: `/balance`, method: 'GET', signal
    },
      );
    }
  

export const getApiGetBalanceQueryKey = () => {
    return [`/balance`] as const;
    }

    
export const getApiGetBalanceInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof apiGetBalance>>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiGetBalance>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiGetBalanceQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiGetBalance>>> = ({ signal }) => apiGetBalance(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000, refetchOnWindowFocus: false, retry: false,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiGetBalance>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiGetBalanceInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof apiGetBalance>>>
export type ApiGetBalanceInfiniteQueryError = ErrorType<unknown>


export function useApiGetBalanceInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiGetBalance>>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiGetBalance>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiGetBalance>>,
          TError,
          Awaited<ReturnType<typeof apiGetBalance>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiGetBalanceInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiGetBalance>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiGetBalance>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiGetBalance>>,
          TError,
          Awaited<ReturnType<typeof apiGetBalance>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiGetBalanceInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiGetBalance>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiGetBalance>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary L·∫•y s·ªë d∆∞
 */

export function useApiGetBalanceInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiGetBalance>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiGetBalance>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiGetBalanceInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiGetBalanceQueryOptions = <TData = Awaited<ReturnType<typeof apiGetBalance>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGetBalance>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiGetBalanceQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiGetBalance>>> = ({ signal }) => apiGetBalance(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000, refetchOnWindowFocus: false, retry: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiGetBalance>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiGetBalanceQueryResult = NonNullable<Awaited<ReturnType<typeof apiGetBalance>>>
export type ApiGetBalanceQueryError = ErrorType<unknown>


export function useApiGetBalance<TData = Awaited<ReturnType<typeof apiGetBalance>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGetBalance>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiGetBalance>>,
          TError,
          Awaited<ReturnType<typeof apiGetBalance>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiGetBalance<TData = Awaited<ReturnType<typeof apiGetBalance>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGetBalance>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiGetBalance>>,
          TError,
          Awaited<ReturnType<typeof apiGetBalance>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiGetBalance<TData = Awaited<ReturnType<typeof apiGetBalance>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGetBalance>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary L·∫•y s·ªë d∆∞
 */

export function useApiGetBalance<TData = Awaited<ReturnType<typeof apiGetBalance>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGetBalance>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiGetBalanceQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary L·∫•y l·ªãch s·ª≠ giao d·ªãch
 */
export const apiGetTransactionHistory = (
    
 signal?: AbortSignal
) => {
      
      
      return customMutator<TransactionHistoryDto[]>(
      {url: `/balance/history`, method: 'GET', signal
    },
      );
    }
  

export const getApiGetTransactionHistoryQueryKey = () => {
    return [`/balance/history`] as const;
    }

    
export const getApiGetTransactionHistoryInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof apiGetTransactionHistory>>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiGetTransactionHistory>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiGetTransactionHistoryQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiGetTransactionHistory>>> = ({ signal }) => apiGetTransactionHistory(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000, refetchOnWindowFocus: false, retry: false,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiGetTransactionHistory>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiGetTransactionHistoryInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof apiGetTransactionHistory>>>
export type ApiGetTransactionHistoryInfiniteQueryError = ErrorType<unknown>


export function useApiGetTransactionHistoryInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiGetTransactionHistory>>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiGetTransactionHistory>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiGetTransactionHistory>>,
          TError,
          Awaited<ReturnType<typeof apiGetTransactionHistory>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiGetTransactionHistoryInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiGetTransactionHistory>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiGetTransactionHistory>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiGetTransactionHistory>>,
          TError,
          Awaited<ReturnType<typeof apiGetTransactionHistory>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiGetTransactionHistoryInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiGetTransactionHistory>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiGetTransactionHistory>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary L·∫•y l·ªãch s·ª≠ giao d·ªãch
 */

export function useApiGetTransactionHistoryInfinite<TData = InfiniteData<Awaited<ReturnType<typeof apiGetTransactionHistory>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiGetTransactionHistory>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiGetTransactionHistoryInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiGetTransactionHistoryQueryOptions = <TData = Awaited<ReturnType<typeof apiGetTransactionHistory>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGetTransactionHistory>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiGetTransactionHistoryQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiGetTransactionHistory>>> = ({ signal }) => apiGetTransactionHistory(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000, refetchOnWindowFocus: false, retry: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiGetTransactionHistory>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ApiGetTransactionHistoryQueryResult = NonNullable<Awaited<ReturnType<typeof apiGetTransactionHistory>>>
export type ApiGetTransactionHistoryQueryError = ErrorType<unknown>


export function useApiGetTransactionHistory<TData = Awaited<ReturnType<typeof apiGetTransactionHistory>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGetTransactionHistory>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiGetTransactionHistory>>,
          TError,
          Awaited<ReturnType<typeof apiGetTransactionHistory>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiGetTransactionHistory<TData = Awaited<ReturnType<typeof apiGetTransactionHistory>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGetTransactionHistory>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiGetTransactionHistory>>,
          TError,
          Awaited<ReturnType<typeof apiGetTransactionHistory>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useApiGetTransactionHistory<TData = Awaited<ReturnType<typeof apiGetTransactionHistory>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGetTransactionHistory>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary L·∫•y l·ªãch s·ª≠ giao d·ªãch
 */

export function useApiGetTransactionHistory<TData = Awaited<ReturnType<typeof apiGetTransactionHistory>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiGetTransactionHistory>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getApiGetTransactionHistoryQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



